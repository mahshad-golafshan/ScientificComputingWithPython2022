# -*- coding: utf-8 -*-
"""07ex_visualization.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1e8-OOplTI5FA6e0S-IRnvrQIQ-DJ-YH3

#1
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

url="https://www.dropbox.com/s/vkl89yce7xjdq4n/regression_generated.csv?dl=1"
pf=pd.read_csv(url)

pf.plot.scatter("features_1","features_2", alpha= 0.5)
pf.plot.scatter("features_1","features_3", alpha= 0.5)
pf.plot.scatter("features_2","features_3", alpha= 0.5)

"""#2"""

import matplotlib.pyplot as plt
import random 
random.seed(2323434)
def Scatter(N, Center_1,Center_2, STD_1, STD_2):
    x_1 = np.random.normal(Center_1, STD_1, N)
    x_2 = np.random.normal(Center_2, STD_2, N)
    y_1 = np.random.normal(Center_1, STD_1, N)
    y_2 = np.random.normal(Center_2, STD_2, N)
    
    fig = plt.figure(figsize=(10, 7))
    plt.scatter(x_1,y_1,alpha=0.8)
    plt.scatter(x_2,y_2,alpha=0.8)
Scatter(500,1,20,10,12)
plt.show()

"""#3"""

!wget https://www.dropbox.com/s/3uqleyc3wyz52tr/residuals_261.pkl -P data/

import numpy as np
import pandas as pd
from scipy.stats import linregress as lg
import seaborn as sns

A= np.load("data/residuals_261.pkl", allow_pickle=True)
df= pd.DataFrame(A.item())
df = df[np.abs(df['residuals']) < 2]
X, Y = df['distances'], df['residuals']
df= df.sort_values(by="distances")
print(lg(X, Y))
graph = sns.jointplot(X, Y , data=df, kind="reg",height=10, marker="+",color='0', marginal_kws=dict(bins=20, fill=False))
Bin_len= (X.max() - X.min())/20
b=Bin_len
x=np.array([b + i * Bin_len for i in range(20)])
y= []
erry= []
l= 0
for i in range(20):
    gf = df[l<df['distances']]
    gf = gf[df['distances']<l + Bin_len]
    y.append(gf['residuals'].mean())
    erry.append(gf['residuals'].std())
    l+= Bin_len
y= np.array(y)
erry= np.array(erry)      

graph.ax_joint.errorbar(x, y, yerr=erry, fmt='o', c='r')

"""#4"""

import numpy as np
import matplotlib.pyplot as plt
from scipy.stats import norm
from scipy.integrate import trapz
import random 

random.seed(23234)

mu = 0
sigma = 10
x= np.array(np.random.normal(mu, sigma, 1000))

plt.yticks(range(0,160,10))
plt.xlabel('Number')
plt.ylabel('Count')

y,edges,_=plt.hist(x,bins=20)
bin_centers = 0.5 * (edges[:-1] + edges[1:])
plt.errorbar(bin_centers, y, yerr=y**(1/2), fmt='o',color='r', ecolor='r')
plt.title("Histogram")
plt.figure()

x_domain=np.linspace(-40,40,100)
Y = np.array([norm.pdf(x_domain, loc= i, scale= 1.06* x.std() * x.size**(-1/5)) for i in x])

for j in range(Y.shape[0]): plt.plot(x_domain,Y[j])
plt.title("Gaussian ")
plt.xlabel("x")
plt.ylabel("y")
plt.figure()

integral = trapz(y,dx=edges[1]-edges[0])
Normalized_Y = integral*(np.sum(Y, axis = 0))/(trapz(np.sum(Y, axis=0)))

plt.plot(x_domain, Normalized_Y)
plt.title("Sum ")
plt.xlabel("x")
plt.ylabel("y")
normalized_integral = np.sum(integral*(np.sum(Y, axis = 0))/(trapz(np.sum(Y, axis=0))))
plt.show()
#print("The integral of first shape is {} and the integral after normalization is {} and \nwe see they are equal".format(integral,np.sum(Normalized_Y))
#print(format(integral,np.sum(Normalized_Y))