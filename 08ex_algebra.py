# -*- coding: utf-8 -*-
"""08ex_algebra.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1kJEGEe3JjCSHTqOTHqlU0kvXBjQE6k3x

# 1
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from scipy import linalg as la

np.random.seed(123213)
x1 = np.random.normal(0,1,1000)
x2 = x1 + np.random.normal(0,3,1000)
x3 = 2*x1 + x2

data={'x1': x1, 'x2':x2, 'x3':x3}
df = pd.DataFrame(data)  
Cov_Matrix= df.cov()
# print(Cov_Matrix)
l, V = la.eig(Cov_Matrix)
print("The eigenvalues:\n", l)
print("\nThe eigenvectors:\n",V)

U, spectrum, Vt = la.svd(Cov_Matrix)

print ("\nThe eigenvalues(SVD) :\n",spectrum)
print ("\nThe eigenvectors(SVD):\n",U,'\n')
print (Vt,'\n')

plt.scatter([1,2,3], l)
plt.title("Eigenvalues and Principal components")
plt.xlabel('Nth eigenvalue')
plt.ylabel('eigenvalue')
plt.ylim(-5, 35)
plt.xticks(range(1,4))
plt.show()
print("The principal components".format((l[0]+l[2])/(l[1]+l[2]+l[0])))

new_df = df.drop(['x3'], axis=1)
X = np.array([x1,x2,x3])
Xp = np.dot(V.T, X)
fig, axs = plt.subplots(2, 3, figsize=(15,10))
fig.suptitle('Original Coordinate Vs New-defined Coordinate')
axs[0,0].scatter(x1, x2, alpha = 0.3, marker='+', color= 'b')
axs[0,0].set_xlabel('x1')
axs[0,0].set_ylabel('x2')
axs[0,1].scatter(x1, x3, alpha = 0.3, marker='+', color= 'b')
axs[0,1].set_xlabel('x1')
axs[0,1].set_ylabel('x3')
axs[0,2].scatter(x2, x3, alpha = 0.3, marker='+', color= 'b')
axs[0,2].set_xlabel('x2')
axs[0,2].set_ylabel('x3')
axs[1,0].scatter(Xp[0], Xp[1], alpha = 0.3, marker='+', color= 'g')
axs[1,0].set_xlabel('New_x1')
axs[1,0].set_ylabel('New_x2')
axs[1,1].scatter(Xp[0], Xp[2], alpha = 0.3, marker='+', color= 'g')
axs[1,1].set_xlabel('New_x1')
axs[1,1].set_ylabel('New_x2')
axs[1,2].scatter(Xp[1], Xp[2], alpha = 0.3, marker='+', color= 'g')
axs[1,2].set_xlabel('New_x2')
axs[1,2].set_ylabel('New_x3')

"""# 2"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from scipy import linalg as la

np.random.seed(123238783)
# +noise
x1 = np.random.normal(0,1,1000)  + np.random.normal(0.05, 1000) 
x2 = x1 + np.random.normal(0,3,1000)
x3 = 2*x1 + x2

data={'x1': x1, 'x2':x2, 'x3':x3}

df = pd.DataFrame(data)  
Cov_Matrix= df.cov()
# print(Cov_Matrix)
l, V = la.eig(Cov_Matrix)
print("The eigenvalues:\n", l)
print("\nThe eigenvectors:\n",V)
print("The principal components".format((l[0]+l[2])/(l[1]+l[2]+l[0])))

X = np.array([x1,x2,x3])
Xp = np.dot(V.T, X)
fig, axs = plt.subplots(2, 3, figsize=(15,10))
fig.suptitle('Original Coordinate Vs New-defined Coordinate')
axs[0,0].scatter(x1, x2, alpha = 0.3, marker='+', color= 'b')
axs[0,0].set_xlabel('x1')
axs[0,0].set_ylabel('x2')
axs[0,1].scatter(x1, x3, alpha = 0.3, marker='+', color= 'b')
axs[0,1].set_xlabel('x1')
axs[0,1].set_ylabel('x3')
axs[0,2].scatter(x2, x3, alpha = 0.3, marker='+', color= 'b')
axs[0,2].set_xlabel('x2')
axs[0,2].set_ylabel('x3')
axs[1,0].scatter(Xp[0], Xp[1], alpha = 0.3, marker='+', color= 'g')
axs[1,0].set_xlabel('New_x1')
axs[1,0].set_ylabel('New_x2')
axs[1,1].scatter(Xp[0], Xp[2], alpha = 0.3, marker='+', color= 'g')
axs[1,1].set_xlabel('New_x1')
axs[1,1].set_ylabel('New_x2')
axs[1,2].scatter(Xp[1], Xp[2], alpha = 0.3, marker='+', color= 'g')
axs[1,2].set_xlabel('New_x2')
axs[1,2].set_ylabel('New_x3')
plt.show()

"""# 3"""

import matplotlib.pyplot as plt
import pandas as pd
import numpy as np
from scipy import linalg as la
!wget https://archive.ics.uci.edu/ml/machine-learning-databases/magic/magic04.data
#!wget https://archive.ics.uci.edu/ml/machine-learning-databases/magic/magic04.names
#df = 'magic04'
df=pd.read_csv('/content/drive/MyDrive/magic04.data')
df=df.iloc[:,:10]
covariance = df.cov()
l, v = la.eig(covariance)
#l = np.real_if_close(l)
x = np.dot(v.T,df.T)
xp = np.dot(v.T,df.T)
fig, axs = plt.subplots(2, 3, figsize=(15,10))
axs[0,0].scatter(df.iloc[:,0],df.iloc[:,1], alpha = 0.3, marker='+', color= 'b')
axs[0,1].scatter(df.iloc[:,0],df.iloc[:,2], alpha = 0.3, marker='+', color= 'b')
axs[0,2].scatter(df.iloc[:,1],df.iloc[:,2], alpha = 0.3, marker='+', color= 'b')
axs[1,0].scatter(xp[0,:],xp[1,:], alpha = 0.3, marker='+', color= 'g')
axs[1,1].scatter(xp[0,:],xp[2,:], alpha = 0.3, marker='+', color= 'g')
axs[1,2].scatter(xp[1,:],xp[2,:], alpha = 0.3, marker='+', color= 'g')
plt.show()