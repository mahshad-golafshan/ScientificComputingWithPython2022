# -*- coding: utf-8 -*-
"""10ex_tests.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1EGKKNEptPS49GJllLD8PuAkoUZWSBG-W

# 1
"""

from math import sqrt, pi, erf
import numpy as np
import matplotlib.pyplot as plt
from scipy import stats

x0 = 15
mu = 6.3
sigma= np.sqrt(mu)
Z = (x0-mu)/sigma   
print("Z =", Z)
pvalue = stats.norm.cdf(-Z) + (1. - stats.norm.cdf(Z))
print("p-value =", pvalue)
alpha = (1. - stats.norm.cdf(3))
print("alpha =",alpha)

"""# 2"""

pre = np.array([120, 132, 120, 110, 115, 128, 120, 112, 110, 100])
post = np.array([140, 156, 145, 130, 117, 148, 137, 119, 127, 135])

x1_avg, x2_avg = np.mean(pre), np.mean(post)
x1_sigma, x2_sigma = np.std(pre), np.mean(post)

T= (x1_avg - x2_avg)/ (sigma* np.sqrt(2/len(pre)))
sigma = np.sqrt((x1_sigma**2 + x2_sigma**2)/2)

p_value = stats.t.cdf(T, len(pre) - 1) + (1. - stats.t.cdf(-T, len(pre) - 1))
print("T is", T)
print("p_value is", p_value)

"""# 3"""

from scipy.optimize import curve_fit

Max_T=np.array([17,19,21,28,33,38,37, 37,31,23,19,18])
Min_T=np.array([-62,-59,-56,-46,-32,-18,-9,-13,-25,-46,-52,-58])
Month=np.array(["Jan", "Feb", "March", "April", "May", "June", "July", "Agust", "Sep", "Oct", "Nov", "Dec"])

fig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2, 2, figsize=(15, 7))

ax1.scatter(Month, Max_T, c='r')
ax1.set_ylabel("Degree (Celcius)")
ax1.set_title("Max Temperature")
# ax1.set_ylim(10,50)
# ax1.set_facecolor("gray")
ax2.scatter(Month, Min_T )
ax2.set_xlabel("Months")
ax2.set_ylabel("Degree (Celcius)")
ax2.set_title("Min Temperature")
def f(x_data, mu, sig):
    return 25*(np.exp(-(x_data - mu) ** 2 / (2 * sig ** 2))) + 15
x_data = np.arange(1,13) 
y_data = Max_T
popt, pcov = curve_fit(f, x_data, y_data, p0=[7,2], maxfev=2000)
ax3.scatter(Month, y_data, c='r', label='data')
ax3.plot(Month, f(x_data, popt[0], popt[1]),'r--', label='fitted function')
ax3.legend(loc='best')
ax3.set_xlabel("Months")
ax3.set_ylabel("Degree (Celcius)")
def f(x_data, mu, sig):
    return 50*(np.exp(-(x_data - mu) ** 2 / (2 * sig ** 2))) - 60
y_data = Min_T
popt, pcov = curve_fit(f, x_data, y_data, p0=[7,2], maxfev=2000)
ax4.scatter(Month, y_data, label='data')
ax4.plot(Month, f(x_data, popt[0], popt[1]),'b--', label='fitted function')
ax4.legend(loc='best')
ax4.set_ylabel("Degree (Celcius)")
ax4.set_xlabel("Month of the Year")
plt.show()

"""# 4"""

import pickle
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import math 
from matplotlib.pyplot import figure
from scipy import stats
from scipy.optimize import curve_fit

!wget https://www.dropbox.com/s/3uqleyc3wyz52tr/residuals_261.pkl
filename = 'residuals_261.pkl'
with open(filename, 'rb') as f:
    data = pickle.load(f)
data = data.reshape(1)[0]['residuals']
data = data[data>-30] + 30  
plt.figure(figsize=(12,8))
y,edges,_=plt.hist(data,bins='auto')
bin_centers = 0.5 * (edges[:-1] + edges[1:])
plt.errorbar(bin_centers, y, yerr=y**(1/2), fmt='+',color='r')
plt.title("Histogram")

def f(x_data,a, mu, sig):
    return a* np.exp(-(x_data - mu) ** 2 / (2 * sig ** 2))

plt.figure(figsize=(12,8))
x_data = bin_centers
y_data = y
popt, pcov = curve_fit(f, x_data, y_data, p0=[600,30,1], maxfev=5000)
plt.scatter(x_data,y_data, marker='+', color='black')
plt.plot(x_data, f(x_data, popt[0], popt[1],popt[2]),'r--', label='fitted function')
plt.legend(loc='best')
plt.xlabel('Residuals')
plt.ylabel('Number')
cov = np.cov(x_data, y_data, ddof=2)
b_hat = cov[0, 1] / cov[0, 0]
a_hat = np.mean(y_data - b_hat * x_data)
ssr = np.sum((y_data - a_hat - b_hat * x_data)**2)
tss = np.sum((np.mean(y_data) - y_data)**2)
rsq = 1 - ssr / tss
print("R2 =", rsq, "\nR =", np.sqrt(rsq))
print("Covariance", np.corrcoef(x_data,y_data))
sigma_y = np.sqrt(np.abs(y_data)) 
ndof = len(x_data) - 1
print("n degrees of freedom =", ndof)
chi2 = np.sum(((y_data - (a_hat + b_hat * x_data))**2) / sigma_y)
print("chi2 =", chi2)
pvalue = 1. - stats.chi2.cdf(chi2, ndof)
print("p-value =", pvalue)

"""# 5"""

import pandas as pd
from scipy.optimize import minimize
from scipy import stats

def seperator_Days(x): 
    return float(x.split(" ")[0])
def seperator_Temps(x): 
    return float(x.split(" ")[1])

def Ftest(ssr_1, ssr_2, ndof_1, ndof_2, nbins, verbose=False):
    F = ((ssr_1 - ssr_2)/(ndof_2 - ndof_1)) / (ssr_2/(nbins - ndof_2))
    CL = 1. - stats.f.cdf(F, ndof_2 - ndof_1, nbins - ndof_2)
    if verbose: print("CL: %.3f" % CL, ", additional parameter ", "YES" if CL < 0.10 else "NO")
    return CL
!wget https://www.dropbox.com/s/7gy9yjl00ymxb8h/munich_temperatures_average_with_bad_data.txt
df= pd.read_csv("munich_temperatures_average_with_bad_data.txt")
df['Days']= pd.Series(df['1995.00274 0.944444'].apply(seperator_Days), index=df.index)
df['Temperatures']= pd.Series(df['1995.00274 0.944444'].apply(seperator_Temps), index=df.index)
df= df.drop(['1995.00274 0.944444'], axis=1)
df= df[df['Temperatures']<40]
df= df[-25<df['Temperatures']]

Days= np.array(df['Days'])
Temps= np.array(df['Temperatures'])

fig, ax= plt.subplots(1, 1, figsize=(12,5))

def f(Days,a,b,c):
    return a* np.cos(2*np.pi*Days + b) + c
    
popt, pcov = curve_fit(f, Days, Temps, p0=[-20,0,10], maxfev=2000)
ax.scatter(Days,Temps, marker='+', color='0', alpha=0.5, label='data')
ax.plot(Days, f(Days, popt[0], popt[1], popt[2]),'r--', label='fitted f(t)')
ax.legend(loc='best')
ax.set_ylabel("Temperatures")
ax.set_xlabel("Days")
ax.set_xlim(2008,2012)
ax.set_title(' per day (f(t) Fitted)')
plt.show()
def Fitted_f(t): return popt[0]* np.cos(2*np.pi*t + popt[1]) + popt[2]
def Neg_Fitted_f(t): return -(popt[0]* np.cos(2*np.pi*t + popt[1]) + popt[2])

min_pred = Fitted_f(minimize(Fitted_f, 2015).x)
max_pred = Neg_Fitted_f(minimize(Neg_Fitted_f, 2015).x)
print("\nThe daily average hottest ", -max_pred[0])
print("\nThe daily average coldest ", min_pred[0])

def g(Days,a,b,c,d):
    return a* np.cos(2*np.pi*b*Days + c) + d
popt, pcov = curve_fit(g, Days, Temps, p0=[-20,1,2,10], maxfev=2000)
def Fitted_g(t): return popt[0]* np.cos(2*np.pi*popt[1]*t + popt[2]) + popt[3]
RSS_g = np.sum((Temps - Fitted_g(Days)**2))
RSS_f = np.sum((Temps - Fitted_f(Days)**2))
print("\nThe RSS for g :\n", RSS_f)
print("The RSS for f :\n", RSS_g)

ndof_f = 3-1
ndof_g = 4-1
print("\nresult:")
cl_g_vs_f = Ftest(RSS_f, RSS_g, ndof_f, ndof_g, 6667, verbose=True)